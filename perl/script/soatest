#!/usr/bin/perl

use strict;
use warnings;

use SCAMP::Requester;
use Getopt::Long;
use JSON::XS;
use Try::Tiny;
use List::Util qw( min max sum );
use File::Slurp qw( read_file );

### argument handling

my %p;

Getopt::Long::Configure ("no_ignore_case");
GetOptions(\%p, qw( sector|S=s header|h=s data|d=s  action|A=s one-header|H=s% envelope=s  inflight|i=i rate|r=f  requests|n=i time|t=f  print-replies|p print-errors|e no-replies|s  quiet|q unaggregated|u warmup|w=i timeout|T=i ) ) or die <<USAGE ;
Usage: soatest {options}

-S --sector    ID       Select a SOA sector to request (def. main)
-h --header    JSON     Header string (required unless --action)
-d --data      TEXT     Payload (required)

-A --action    NAME     Action name~version (def. version=1)
-H --one-header N=V     Specify a single header in text form; V may be \@file
   --envelope  FORMAT   Select envelope (def. json)

-i --inflight  COUNT    Max pending requests (def. unlimited)
-r --rate      HERTZ    Max requests per second (def. unlimited)

-n --requests  TOTAL    Number of requests to generate (def. 1 unless -t set)
-t --time      SECONDS  Time after which to exit (def. unlimited)

-p --print-replies      Print replies (default if no -n or -t)
-e --print-errors       Print error replies only (default otherwise)
-s --no-replies         Print no replies ("silent")

-q --quiet              Suppress timing information
-u --unaggregated       Per-request timing information
-w --warmup    COUNT    Exclude first N results from statistics
-T --timeout   SECONDS  Give up after N seconds (default 75)
USAGE

die "--data required\n" if !exists $p{data};

my $header;

if (exists $p{header}) {
    try {
        $header = decode_json $p{header}
    } catch {
        die "--header does not contain valid JSON: $_\n";
    };
}

if (exists $p{action}) {
    my $ac  = $p{action};
    my $ver = 1;
    my $env = $p{envelope} || 'json';
    $ver = $1 if $ac =~ s/~(\d+)$//;
    $header = { %{ $header || {} }, action => $ac, envelope => $env, version => $ver };
}

die "--header or --action required\n" unless $header;

if ($p{'one-header'}) {
    while (my ($k, $v) = each %{$p{'one-header'}}) {
        $header->{$k} = $v =~ /^@(.*)/ ? scalar(read_file($1)) : $v;
    }
}

die "--inflight must be a positive integer\n" if exists($p{inflight}) && !($p{inflight} > 0);
die "--rate must be positive\n" if exists($p{rate}) && !($p{rate} > 0);
die "--requests must be a positive integer\n" if exists($p{requests}) && !($p{requests} > 0);
die "--time must be positive\n" if exists($p{time}) && !($p{time} > 0);

sub mutex {
    die join(", ", map { "--$_" } @_) . " are mutually exclusive\n" if (grep { exists $p{$_} } @_) > 1;
}

mutex qw( print-replies print-errors no-replies );
mutex qw( time requests );
mutex qw( quiet unaggregated );
mutex qw( warmup quiet );

die "--time without --inflight or --rate would only measure local buffering speed\n"
    if $p{time} && !$p{inflight} && !$p{rate};

my $outputlevel = (exists($p{requests}) || exists($p{time})) ? 2 : 1;
$outputlevel = 1 if $p{'print-replies'};
$outputlevel = 2 if $p{'print-errors'};
$outputlevel = 3 if $p{'no-replies'};

$p{requests} = 1 if !$p{requests} && !$p{time};

my $requester = SCAMP::Requester->new( sector => $p{sector} || 'main' );
$requester->services->fill_from_cache;

### timing...

my @requests;
my $base = EV::now;

my $pending = 0;
my $time_waiting = 0;
my $time_wait_timer;

sub decrease_quota {
    $pending++;
    if ($p{rate}) {
        $time_waiting = 1;
        $time_wait_timer = EV::timer 1/$p{rate}, 0, sub {
            $time_waiting = 0;
            fire_request_quota();
        };
    }
}

sub fire_request_quota {
    if (($p{requests} && @requests >= $p{requests}) ||
            ($p{time} && EV::now - $base >= $p{time})) {
        # our work here is done
        if (!$pending) {
            summarize() unless $p{quiet};
            exit;
        }
        return;
    }
    # ok, more to do.  now, or later?

    if ($time_waiting || ($p{inflight} && $pending >= $p{inflight})) {
        return;
    }

    fire_request();
    goto &fire_request_quota;
}

### requesting

sub fire_request {
    decrease_quota;
    my $i = @requests;
    push @requests, { start => EV::now - $base };

    print "request[$i] $requests[$i]{start}\n" if $p{unaggregated};

    my $msg = SCAMPUtil::Stream->new( header => $header, data => $p{data} );
    $requester->make_request( { timeout => $p{timeout}}, $msg, sub {
        $requests[$i]{rcv} = EV::now - $base;
        print "receive_start[$i] $requests[$i]{rcv}\n" if $p{unaggregated};

        $_[0]->on_all_data( sub {
            my $msg = shift;
            $requests[$i]{end} = EV::now - $base;
            print "receive_end[$i] $requests[$i]{end}\n" if $p{unaggregated};

            $requests[$i]{error} = ($msg->error || $msg->header->{error_code});
            if (($requests[$i]{error} ? 2 : 1) >= $outputlevel) {
                print "header[$i] ", encode_json($msg->header), "\n";
                print "data[$i] ", $msg->data, "\n";
                print "error[$i] ", $msg->error, "\n" if $msg->error;
            }

            $pending--;
            fire_request_quota;
        } );
    } );
}

### summaries

sub stats {
    splice @_, 0, $p{warmup} if $p{warmup};
    my $min   = min(@_) || 0;
    my $max   = max(@_) || 0;
    my $smean = @_ < 1 ? 0 : sum(0,@_) / @_;
    my $ssdev = @_ < 2 ? 0 : sqrt( sum(0, map { ($_ - $smean) ** 2 } @_) / (@_ - 1) );

    return sprintf "min=%.1f max=%.1f mean=%.1f sdev=%.1f", $min, $max, $smean, $ssdev;
}

sub summarize {
    my $total  = @requests;
    my $errors = grep { $_->{error} } @requests;
    my $time   = EV::now - $base;

    printf "requests total=%d errors=%d per_second=%f\n", $total, $errors, ($time ? $total / $time : 'NaN');
    printf "time_ms total=%.1f per_request_amortized=%.1f\n", $time * 1000, ($total ? 1000 * $time / $total : 'NaN');
    printf "header_to_end_ms %s\n",     stats(map { 1000 * ($_->{end} - $_->{rcv})   } @requests);
    printf "request_to_header_ms %s\n", stats(map { 1000 * ($_->{rcv} - $_->{start}) } @requests);
    printf "request_to_end_ms %s\n",    stats(map { 1000 * ($_->{end} - $_->{start}) } @requests);
}

### done

fire_request_quota;
EV::run;
